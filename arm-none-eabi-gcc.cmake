# Add to location to CMakePresets.json toolchain file block
# "CMAKE_TOOLCHAIN_FILE": {
#                     "type": "FILEPATH",
#                     "value": "arm-none-eabi-gcc.cmake"
#                 }

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ARM)

# TOOLCHAIN EXTENSION
IF(WIN32)
    SET(TOOLCHAIN_EXT ".exe")
ELSE()
    SET(TOOLCHAIN_EXT "")
ENDIF()

# TARGET_TRIPLET
SET(TARGET_TRIPLET "arm-none-eabi-")

# Find compiler on path
find_program(COMPILER_ON_PATH "${TARGET_TRIPLET}gcc${TOOLCHAIN_EXT}")
MESSAGE(STATUS "COMPILER_ON_PATH: " ${COMPILER_ON_PATH})
get_filename_component(ARM_TOOLCHAIN_DIR ${COMPILER_ON_PATH} DIRECTORY)

set(BINUTILS_PATH ${ARM_TOOLCHAIN_DIR}) 
set(TOOLCHAIN_PREFIX ${ARM_TOOLCHAIN_DIR}/${TARGET_TRIPLET})

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_C_COMPILER "${TOOLCHAIN_PREFIX}gcc${TOOLCHAIN_EXT}")
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
set(CMAKE_CXX_COMPILER "${TOOLCHAIN_PREFIX}g++${TOOLCHAIN_EXT}")

set(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}objcopy${TOOLCHAIN_EXT} CACHE INTERNAL "objcopy tool")
set(CMAKE_SIZE_UTIL ${TOOLCHAIN_PREFIX}size${TOOLCHAIN_EXT} CACHE INTERNAL "size tool")

set(CMAKE_FIND_ROOT_PATH ${BINUTILS_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
